# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: chess-dojo-scheduler
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-plugin-custom-roles

provider:
  name: aws
  stage: ${file(./config.yml):stage}
  runtime: go1.x
  region: us-east-1
  environment:
    stage: ${opt:stage, self:provider.stage}
    frontendHost: ${file(./config.yml):frontendHost}
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt CognitoUserPool.ProviderURL
        audience:
          - Ref: UserClient

package:
  individually: true
  patterns:
    - '!./**'

functions:
  ######### User Endpoints ###############

  createUser:
    handler: bin/user/create
    package:
      patterns:
        - ./bin/user/create
    events:
      - cognitoUserPool:
          pool: ${opt:stage, self:provider.stage}-chess-dojo-scheduler-auth-pool
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  setUser:
    handler: bin/user/set
    package:
      patterns:
        - ./bin/user/set
    events:
      - httpApi:
          path: /user
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  getUser:
    handler: bin/user/get
    package:
      patterns:
        - ./bin/user/get
    events:
      - httpApi:
          path: /user
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /public/user/{username}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  ########## Availability Endpoints ##############

  setAvailability:
    handler: bin/availability/set
    package:
      patterns:
        - ./bin/availability/set
    events:
      - httpApi:
          path: /availability
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt AvailabilitiesTable.Arn

  bookAvailability:
    handler: bin/availability/book
    package:
      patterns:
        - ./bin/availability/book
    events:
      - httpApi:
          path: /availability/book
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt MeetingsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: !GetAtt AvailabilitiesTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  deleteAvailability:
    handler: bin/availability/delete
    package:
      patterns:
        - ./bin/availability/delete
    events:
      - httpApi:
          path: /availability/{id}
          method: delete
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt AvailabilitiesTable.Arn

  getAvailability:
    handler: bin/availability/get
    package:
      patterns:
        - ./bin/availability/get
    events:
      - httpApi:
          path: /availability
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt AvailabilitiesTable.Arn

resources:
  Resources:
    ######### Cognito Resources ###############

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:stage, self:provider.stage}-chess-dojo-scheduler-auth-pool
        UsernameConfiguration:
          CaseSensitive: false
        AliasAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${opt:stage, self:provider.stage}-chess-dojo-scheduler-auth-client
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        CallbackURLs:
          - ${file(./config.yml):frontendHost}
        LogoutURLs:
          - ${file(./config.yml):frontendHost}
        SupportedIdentityProviders:
          - Google
        AccessTokenValidity: 24
        IdTokenValidity: 24

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        Domain: user-pool-domain-${opt:stage, self:provider.stage}-chess-dojo-scheduler

    UserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        ProviderName: 'Google'
        ProviderDetails:
          client_id: ${file(./oauth.yml):client_id}
          client_secret: ${file(./oauth.yml):client_secret}
          authorize_scopes: 'profile email openid'
        ProviderType: 'Google'
        AttributeMapping:
          email: 'email'
          name: 'name'
          username: 'sub'
          email_verified: 'email_verified'

    ######### End Cognito Resources ###############

    ######### DynamoDB Resources ##################

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

    AvailabilitiesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-availabilities
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: startTime
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: SearchIndex
            KeySchema:
              - AttributeName: startTime
                KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

    MeetingsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:stage, self:provider.stage}-meetings
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: participant
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: ParticipantIndex
            KeySchema:
              - AttributeName: participant
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 1
              WriteCapacityUnits: 1
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true
