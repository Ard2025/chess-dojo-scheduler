# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: chess-dojo-scheduler
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

plugins:
  - serverless-plugin-custom-roles
  - serverless-go-plugin

provider:
  name: aws
  runtime: provided.al2
  architecture: arm64
  region: us-east-1
  environment:
    stage: ${sls:stage}
    frontendHost: ${file(./config-${sls:stage}.yml):frontendHost}
    discordAuth: ${file(./discord.yml):discordAuth}
    discordFindGameChannelId: ${file(./config-${sls:stage}.yml):discordFindGameChannelId}
    discordPrivateGuildId: ${file(./config-${sls:stage}.yml):discordPrivateGuildId}
    discordPublicGuildId: ${file(./config-${sls:stage}.yml):discordPublicGuildId}
    userPoolId: { Ref: CognitoUserPool }
    wixApiKey: ${file(./wix.yml):wixApiKey}
  httpApi:
    cors: true
    authorizers:
      serviceAuthorizer:
        identitySource: $request.header.Authorization
        issuerUrl: !GetAtt CognitoUserPool.ProviderURL
        audience:
          - Ref: UserClient

custom:
  go:
    binDir: bin
    cmd: GOARCH=arm64 GOOS=linux go build -tags lambda.norpc -ldflags="-s -w"
    supportedRuntimes: ['provided.al2']
    buildProvidedRuntimeAsBootstrap: true

functions:
  ######### Admin Endpoints ##############

  adminListUsers:
    handler: admin/user/list/main.go
    events:
      - httpApi:
          path: /admin/user
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Scan
        Resource: !GetAtt UsersTable.Arn

  adminGetStatistics:
    handler: admin/statistics/get/main.go
    events:
      - httpApi:
          path: /admin/statistics
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt UsersTable.Arn

  adminListRequirements:
    handler: admin/requirement/list/main.go
    events:
      - httpApi:
          path: /admin/requirement
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt RequirementsTable.Arn

  ######### User Endpoints ###############

  linkProvider:
    handler: user/provider/link/main.go
    events:
      - cognitoUserPool:
          pool: ${sls:stage}-chess-dojo-scheduler-auth-pool
          trigger: PreSignUp
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - cognito-idp:ListUsers
          - cognito-idp:AdminLinkProviderForUser
        Resource: !GetAtt CognitoUserPool.Arn

  createUser:
    handler: user/create/main.go
    events:
      - cognitoUserPool:
          pool: ${sls:stage}-chess-dojo-scheduler-auth-pool
          trigger: PostConfirmation
          existing: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt UsersTable.Arn

  checkAccess:
    handler: user/access/check/main.go
    events:
      - httpApi:
          path: /user/access
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  updateUser:
    handler: user/update/main.go
    events:
      - httpApi:
          path: /user
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:DeleteObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref PicturesBucket
            - /profile/*

  updateUserProgress:
    handler: user/progress/update/main.go
    events:
      - httpApi:
          path: /user/progress
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt RequirementsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TimelineTable.Arn

  updateUserTimeline:
    handler: user/progress/timeline/main.go
    events:
      - httpApi:
          path: /user/progress/timeline
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt RequirementsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: !GetAtt TimelineTable.Arn

  getUser:
    handler: user/get/main.go
    events:
      - httpApi:
          path: /user
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /public/user/{username}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  listUserTimeline:
    handler: user/timeline/list/main.go
    events:
      - httpApi:
          path: /user/{owner}/timeline
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt TimelineTable.Arn

  listUsers:
    handler: user/list/main.go
    events:
      - httpApi:
          path: /user/{cohort}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt UsersTable.Arn
                - '/index/CohortIdx'

  searchUsers:
    handler: user/search/main.go
    events:
      - httpApi:
          path: /public/user/search
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !GetAtt UsersTable.Arn
          - Fn::Join:
              - ''
              - - !GetAtt UsersTable.Arn
                - '/index/SearchIdx'

  updateRatings:
    handler: user/ratings/update/main.go
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate0-800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 0-300
                - 300-400
                - 400-500
                - 500-600
                - 600-700
                - 700-800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate800-1300
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 800-900
                - 900-1000
                - 1000-1100
                - 1100-1200
                - 1200-1300
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1300-1500
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1300-1400
                - 1400-1500
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1500-1800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1500-1600
                - 1600-1700
                - 1700-1800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: StatsUpdate1800+
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1800-1900
                - 1900-2000
                - 2000-2100
                - 2100-2200
                - 2200-2300
                - 2300-2400
                - 2400+
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt UsersTable.Arn
                - '/index/CohortIdx'

  updateStatistics:
    handler: user/statistics/update/main.go
    events:
      - schedule:
          rate: cron(20 0 * * ? *)
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt UsersTable.Arn
                - '/index/CohortIdx'
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt RequirementsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt GraduationsTable.Arn

  updateTimeSpent:
    handler: user/timeline/statistics/main.go
    events:
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate0-800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 0-300
                - 300-400
                - 400-500
                - 500-600
                - 600-700
                - 700-800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate800-1100
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 800-900
                - 900-1000
                - 1000-1100
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1100-1300
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1100-1200
                - 1200-1300
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1300-1500
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1300-1400
                - 1400-1500
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1500-1800
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1500-1600
                - 1600-1700
                - 1700-1800
      - schedule:
          rate: cron(0 0 * * ? *)
          input:
            id: TimeSpentUpdate1800+
            detail-type: Scheduled Event
            source: Serverless
            region: ${aws:region}
            detail:
              cohorts:
                - 1800-1900
                - 1900-2000
                - 2000-2100
                - 2100-2200
                - 2200-2300
                - 2300-2400
                - 2400+
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt UsersTable.Arn
                - '/index/CohortIdx'
      - Effect: Allow
        Action:
          - dynamodb:PartiQLUpdate
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt TimelineTable.Arn

  graduate:
    handler: user/graduate/main.go
    events:
      - httpApi:
          path: /user/graduate
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt RequirementsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt GraduationsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt TimelineTable.Arn

  getUserStatistics:
    handler: user/statistics/get/main.go
    events:
      - httpApi:
          path: /public/user/statistics
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  listNotifications:
    handler: user/notifications/list/main.go
    events:
      - httpApi:
          path: /user/notifications
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt NotificationsTable.Arn

  deleteNotification:
    handler: user/notifications/delete/main.go
    events:
      - httpApi:
          path: /user/notifications/{id}
          method: delete
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt NotificationsTable.Arn

  getFollower:
    handler: user/followers/get/main.go
    events:
      - httpApi:
          path: /user/followers/{poster}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt FollowersTable.Arn

  editFollower:
    handler: user/followers/edit/main.go
    events:
      - httpApi:
          path: /user/followers
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:DeleteItem
        Resource: !GetAtt FollowersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt NotificationsTable.Arn

  listFollowers:
    handler: user/followers/list/main.go
    events:
      - httpApi:
          path: /public/user/{username}/followers
          method: get
      - httpApi:
          path: /public/user/{username}/following
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt FollowersTable.Arn
          - Fn::Join:
              - ''
              - - !GetAtt FollowersTable.Arn
                - '/index/FollowingIndex'

  ############## Event Endpoints #################

  bookEvent:
    handler: event/book/main.go
    events:
      - httpApi:
          path: /event/{id}/book
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:UpdateItem
        Resource: !GetAtt EventsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  cancelEvent:
    handler: event/cancel/main.go
    events:
      - httpApi:
          path: /event/{id}/cancel
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt EventsTable.Arn

  deleteEvent:
    handler: event/delete/main.go
    events:
      - httpApi:
          path: /event/{id}
          method: delete
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
          - dynamodb:UpdateItem
        Resource: !GetAtt EventsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  getEvent:
    handler: event/get/main.go
    events:
      - httpApi:
          path: /event/{id}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt EventsTable.Arn

  listEvents:
    handler: event/list/main.go
    events:
      - httpApi:
          path: /event
          method: get
          authorizer: serviceAuthorizer
      - httpApi:
          path: /public/event
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt EventsTable.Arn

  setEvent:
    handler: event/set/main.go
    events:
      - httpApi:
          path: /event
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:UpdateItem
        Resource: !GetAtt EventsTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  ########## Game Endpoints ##############

  createGame:
    timeout: 28
    handler: game/create/main.go
    events:
      - httpApi:
          path: /game
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource:
          - !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:BatchWriteItem
        Resource:
          - !GetAtt GamesTable.Arn

  updateGame:
    handler: game/update/main.go
    events:
      - httpApi:
          path: /game/{cohort}/{id+}
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt GamesTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn

  deleteGame:
    handler: game/delete/main.go
    events:
      - httpApi:
          path: /game/{cohort}/{id+}
          method: delete
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: !GetAtt GamesTable.Arn

  getGame:
    handler: game/get/main.go
    events:
      - httpApi:
          path: /game/{cohort}/{id+}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt GamesTable.Arn

  createGameComment:
    handler: game/comment/create/main.go
    events:
      - httpApi:
          path: /game/{cohort}/{id+}
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt GamesTable.Arn
          - !GetAtt NotificationsTable.Arn

  listGamesByCohort:
    handler: game/list/cohort/main.go
    events:
      - httpApi:
          path: /game/{cohort}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt GamesTable.Arn

  listGamesByOwner:
    handler: game/list/owner/main.go
    events:
      - httpApi:
          path: /game
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt GamesTable.Arn
                - '/index/OwnerIndex'
          - Fn::Join:
              - ''
              - - !GetAtt GamesTable.Arn
                - '/index/WhiteIdx'
          - Fn::Join:
              - ''
              - - !GetAtt GamesTable.Arn
                - '/index/BlackIdx'

  listGamesByOpening:
    handler: game/list/opening/main.go
    events:
      - httpApi:
          path: /game/opening
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource:
          - !GetAtt GamesTable.Arn
          - Fn::Join:
              - ''
              - - !GetAtt GamesTable.Arn
                - '/index/OwnerIndex'

  listFeaturedGames:
    handler: game/list/featured/main.go
    events:
      - httpApi:
          path: /game/featured
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - Fn::Join:
              - ''
              - - !GetAtt GamesTable.Arn
                - '/index/FeaturedIdx'

  updateGameStatistics:
    handler: game/statistics/update/main.go
    events:
      - schedule:
          rate: cron(20 0 * * ? *)
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt GamesTable.Arn
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref GameDatabaseBucket
            - /dojo_database.zip

  ########## Requirement Endpoints ##############

  getRequirement:
    handler: requirement/get/main.go
    events:
      - httpApi:
          path: /requirement/{id}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource:
          - !GetAtt RequirementsTable.Arn

  listRequirements:
    handler: requirement/list/main.go
    events:
      - httpApi:
          path: /requirements/{cohort}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
          - dynamodb:Scan
        Resource:
          - !GetAtt RequirementsTable.Arn

  setRequirement:
    handler: requirement/set/main.go
    events:
      - httpApi:
          path: /requirement
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt RequirementsTable.Arn

  ########## Graduation Endpoints ##############

  listGraduationsByCohort:
    handler: graduation/list/main.go
    events:
      - httpApi:
          path: /graduations/{cohort}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt GraduationsTable.Arn

  listGraduationsByOwner:
    handler: graduation/list/main.go
    events:
      - httpApi:
          path: /graduations/owner/{username}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt GraduationsTable.Arn

  listGraduationsByDate:
    handler: graduation/list/main.go
    events:
      - httpApi:
          path: /graduations
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt GraduationsTable.Arn

  ########## Opening Endpoints ##############

  getOpening:
    handler: opening/get/main.go
    events:
      - httpApi:
          path: /openings/{id}
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt OpeningTable.Arn

  listOpenings:
    handler: opening/list/main.go
    events:
      - httpApi:
          path: /openings
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Scan
        Resource: !GetAtt OpeningTable.Arn

  ########## Tournament Endpoints ##############

  createTournament:
    handler: tournament/create/main.go
    events:
      - httpApi:
          path: /tournaments
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: !GetAtt EventsTable.Arn
    environment:
      botAccessToken: ${file(./tournament.yml):botAccessToken}

  updateTournamentLeaderboard:
    handler: tournament/leaderboard/update/main.go
    events:
      - httpApi:
          path: /tournaments/leaderboard
          method: post
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
          - dynamodb:GetItem
        Resource: !GetAtt TournamentsTable.Arn
    environment:
      botAccessToken: ${file(./tournament.yml):botAccessToken}

  getTournamentLeaderboard:
    handler: tournament/leaderboard/get/main.go
    events:
      - httpApi:
          path: /public/tournaments/leaderboard
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TournamentsTable.Arn

  snapshotTournamentLeaderboard:
    handler: tournament/leaderboard/snapshot/main.go
    events:
      - schedule:
          rate: cron(0 0 1 * ? *)
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:PutItem
        Resource: !GetAtt TournamentsTable.Arn
    environment:
      mongoConnectionString: ${file(./tournament.yml):mongoConnectionString}

  openClassicalRegister:
    handler: tournament/openClassical/register/main.go
    events:
      - httpApi:
          path: /public/tournaments/open-classical/register
          method: post
      - httpApi:
          path: /tournaments/open-classical/register
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref SecretsBucket
            - /openClassicalServiceAccountKey.json

  openClassicalSubmitResults:
    handler: tournament/openClassical/results/submit/main.go
    events:
      - httpApi:
          path: /public/tournaments/open-classical/results
          method: post
      - httpApi:
          path: /tournaments/open-classical/results
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:GetObject
        Resource: !Join
          - ''
          - - 'arn:aws:s3:::'
            - !Ref SecretsBucket
            - /openClassicalServiceAccountKey.json

  ######### Newsfeed Endpoints ###############

  createNewsfeedEntry:
    handler: newsfeed/create/main.go
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TimelineTable.StreamArn
          batchWindow: 20
          batchSize: 10
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          functionResponseType: ReportBatchItemFailures
          filterPatterns:
            - eventName: [INSERT]
      - stream:
          type: dynamodb
          arn: !GetAtt FollowersTable.StreamArn
          batchWindow: 20
          batchSize: 10
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          functionResponseType: ReportBatchItemFailures
          filterPatterns:
            - eventName: [INSERT]
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: !GetAtt NewsfeedTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt FollowersTable.Arn
          - !GetAtt TimelineTable.Arn

  deleteNewsfeedEntry:
    handler: newsfeed/delete/main.go
    timeout: 30
    events:
      - stream:
          type: dynamodb
          arn: !GetAtt TimelineTable.StreamArn
          batchWindow: 20
          batchSize: 10
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          functionResponseType: ReportBatchItemFailures
          filterPatterns:
            - eventName: [REMOVE]
      - stream:
          type: dynamodb
          arn: !GetAtt FollowersTable.StreamArn
          batchWindow: 20
          batchSize: 10
          maximumRetryAttempts: 2
          parallelizationFactor: 2
          functionResponseType: ReportBatchItemFailures
          filterPatterns:
            - eventName: [REMOVE]
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:BatchWriteItem
        Resource: !GetAtt NewsfeedTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - !GetAtt NewsfeedTable.Arn
          - Fn::Join:
              - ''
              - - !GetAtt NewsfeedTable.Arn
                - '/index/PosterIndex'

  getNewsfeedItem:
    handler: newsfeed/get/main.go
    events:
      - httpApi:
          path: /public/newsfeed/{owner}/{id}
          method: get
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt TimelineTable.Arn

  listNewsfeed:
    handler: newsfeed/list/main.go
    events:
      - httpApi:
          path: /newsfeed
          method: get
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: !GetAtt NewsfeedTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:BatchGetItem
        Resource: !GetAtt TimelineTable.Arn

  createNewsfeedComment:
    handler: newsfeed/comment/create/main.go
    events:
      - httpApi:
          path: /newsfeed/{owner}/{id}/comments
          method: post
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - !GetAtt TimelineTable.Arn
          - !GetAtt NotificationsTable.Arn

  setNewsfeedReaction:
    handler: newsfeed/react/main.go
    events:
      - httpApi:
          path: /newsfeed/{owner}/{id}/reactions
          method: put
          authorizer: serviceAuthorizer
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
        Resource: !GetAtt UsersTable.Arn
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: !GetAtt TimelineTable.Arn

resources:
  Conditions:
    IsProd: !Equals ['${sls:stage}', 'prod']

  Resources:
    ######### Cognito Resources ###############

    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${sls:stage}-chess-dojo-scheduler-auth-pool
        UsernameConfiguration:
          CaseSensitive: false
        AliasAttributes:
          - email
        MfaConfiguration: OFF
        Schema:
          - Name: email
            Required: true
            Mutable: true
        Policies:
          PasswordPolicy:
            MinimumLength: 6
        AutoVerifiedAttributes: ['email']

    UserClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${sls:stage}-chess-dojo-scheduler-auth-client
        GenerateSecret: false
        UserPoolId: { Ref: CognitoUserPool }
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        AllowedOAuthFlowsUserPoolClient: true
        AllowedOAuthFlows:
          - code
        AllowedOAuthScopes:
          - openid
          - email
          - profile
        CallbackURLs:
          - ${file(./config-${sls:stage}.yml):frontendHost}
        LogoutURLs:
          - ${file(./config-${sls:stage}.yml):frontendHost}
        SupportedIdentityProviders:
          - COGNITO
          - Google
        AccessTokenValidity: 24
        IdTokenValidity: 24

    UserPoolDomain:
      Type: AWS::Cognito::UserPoolDomain
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        Domain: user-pool-domain-${sls:stage}-chess-dojo-scheduler

    UserPoolIdentityProvider:
      Type: AWS::Cognito::UserPoolIdentityProvider
      Properties:
        UserPoolId: { Ref: CognitoUserPool }
        ProviderName: 'Google'
        ProviderDetails:
          client_id: ${file(./oauth.yml):client_id}
          client_secret: ${file(./oauth.yml):client_secret}
          authorize_scopes: 'profile email openid'
        ProviderType: 'Google'
        AttributeMapping:
          email: 'email'
          name: 'name'
          username: 'sub'
          email_verified: 'email_verified'

    ######### End Cognito Resources ###############

    ######### DynamoDB Resources ##################

    UsersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-users
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: dojoCohort
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        GlobalSecondaryIndexes:
          - IndexName: CohortIdx
            KeySchema:
              - AttributeName: dojoCohort
                KeyType: HASH
              - AttributeName: username
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
          - IndexName: SearchIdx
            KeySchema:
              - AttributeName: dojoCohort
                KeyType: HASH
              - AttributeName: username
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - displayName
                - discordUsername
                - searchKey
                - ratings

    TimelineTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-timeline
        AttributeDefinitions:
          - AttributeName: owner
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: owner
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        StreamSpecification:
          StreamViewType: NEW_IMAGE

    FollowersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-followers
        AttributeDefinitions:
          - AttributeName: poster
            AttributeType: S
          - AttributeName: follower
            AttributeType: S
        KeySchema:
          - AttributeName: poster
            KeyType: HASH
          - AttributeName: follower
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        StreamSpecification:
          StreamViewType: KEYS_ONLY
        GlobalSecondaryIndexes:
          - IndexName: FollowingIndex
            KeySchema:
              - AttributeName: follower
                KeyType: HASH
              - AttributeName: poster
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    EventsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-events
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue
        TimeToLiveSpecification:
          AttributeName: expirationTime
          Enabled: true

    RequirementsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-requirements
        AttributeDefinitions:
          - AttributeName: status
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: status
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 2
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue

    GraduationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-graduations
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: previousCohort
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: previousCohort
            KeyType: RANGE
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 5
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue

    GamesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-games
        AttributeDefinitions:
          - AttributeName: cohort
            AttributeType: S
          - AttributeName: id
            AttributeType: S
          - AttributeName: owner
            AttributeType: S
          - AttributeName: white
            AttributeType: S
          - AttributeName: black
            AttributeType: S
          - AttributeName: isFeatured
            AttributeType: S
          - AttributeName: featuredAt
            AttributeType: S
        KeySchema:
          - AttributeName: cohort
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        PointInTimeRecoverySpecification:
          PointInTimeRecoveryEnabled: !If
            - IsProd
            - true
            - false
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 4
            WriteCapacityUnits: 2
          - !Ref AWS::NoValue
        GlobalSecondaryIndexes:
          - IndexName: OwnerIndex
            KeySchema:
              - AttributeName: owner
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - white
                - black
                - date
                - headers
            ProvisionedThroughput: !If
              - IsProd
              - ReadCapacityUnits: 2
                WriteCapacityUnits: 2
              - !Ref AWS::NoValue
          - IndexName: WhiteIdx
            KeySchema:
              - AttributeName: white
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - black
                - date
                - owner
                - ownerDisplayName
                - ownerPreviousCohort
                - headers
            ProvisionedThroughput: !If
              - IsProd
              - ReadCapacityUnits: 2
                WriteCapacityUnits: 2
              - !Ref AWS::NoValue
          - IndexName: BlackIdx
            KeySchema:
              - AttributeName: black
                KeyType: HASH
              - AttributeName: id
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - white
                - date
                - owner
                - ownerDisplayName
                - ownerPreviousCohort
                - headers
            ProvisionedThroughput: !If
              - IsProd
              - ReadCapacityUnits: 2
                WriteCapacityUnits: 2
              - !Ref AWS::NoValue
          - IndexName: FeaturedIdx
            KeySchema:
              - AttributeName: isFeatured
                KeyType: HASH
              - AttributeName: featuredAt
                KeyType: RANGE
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - white
                - black
                - date
                - owner
                - ownerDisplayName
                - ownerPreviousCohort
                - headers
            ProvisionedThroughput: !If
              - IsProd
              - ReadCapacityUnits: 1
                WriteCapacityUnits: 1
              - !Ref AWS::NoValue

    OpeningTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-openings
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue
        GlobalSecondaryIndexes:
          - IndexName: CourseIndex
            KeySchema:
              - AttributeName: id
                KeyType: HASH
            Projection:
              ProjectionType: INCLUDE
              NonKeyAttributes:
                - name
                - cohortRange
                - color
            ProvisionedThroughput: !If
              - IsProd
              - ReadCapacityUnits: 1
                WriteCapacityUnits: 1
              - !Ref AWS::NoValue

    TournamentsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-tournaments
        AttributeDefinitions:
          - AttributeName: type
            AttributeType: S
          - AttributeName: startsAt
            AttributeType: S
        KeySchema:
          - AttributeName: type
            KeyType: HASH
          - AttributeName: startsAt
            KeyType: RANGE
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue

    NotificationsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-notifications
        AttributeDefinitions:
          - AttributeName: username
            AttributeType: S
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: username
            KeyType: HASH
          - AttributeName: id
            KeyType: RANGE
        BillingMode: !If
          - IsProd
          - PROVISIONED
          - PAY_PER_REQUEST
        ProvisionedThroughput: !If
          - IsProd
          - ReadCapacityUnits: 1
            WriteCapacityUnits: 1
          - !Ref AWS::NoValue

    NewsfeedTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${sls:stage}-newsfeed
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: newsfeedId
            AttributeType: S
          - AttributeName: sortKey
            AttributeType: S
          - AttributeName: poster
            AttributeType: S
          - AttributeName: timelineId
            AttributeType: S
        KeySchema:
          - AttributeName: newsfeedId
            KeyType: HASH
          - AttributeName: sortKey
            KeyType: RANGE
        GlobalSecondaryIndexes:
          - IndexName: PosterIndex
            KeySchema:
              - AttributeName: poster
                KeyType: HASH
              - AttributeName: timelineId
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY

    ############# S3 Resources #################

    GameDatabaseBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: chess-dojo-${sls:stage}-game-database
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false

    GameDatabaseBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref GameDatabaseBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref GameDatabaseBucket
                  - /dojo_database.zip
              Principal: '*'

    PicturesBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: chess-dojo-${sls:stage}-pictures
        PublicAccessBlockConfiguration:
          BlockPublicPolicy: false

    PicturesBucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref PicturesBucket
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref PicturesBucket
                  - /profile/*
              Principal: '*'

    SecretsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: chess-dojo-${sls:stage}-secrets

    ############# End S3 Resources ##############

    ############# Alert Resources ###############

    AlertNotificationsTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: chess-dojo-${sls:stage}-alert-notifications
        Subscription:
          - Endpoint: jackstenglein@gmail.com
            Protocol: EMAIL

    UpdateRatingsTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateRatingsTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateRatings function'
        AlarmActions:
          - !Ref AlertNotificationsTopic
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-scheduler-${sls:stage}-updateRatings
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    UpdateStatisticsTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateStatisticsTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateStatistics function'
        AlarmActions:
          - !Ref AlertNotificationsTopic
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-scheduler-${sls:stage}-updateStatistics
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    UpdateTimeSpentTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateTimeSpentTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateTimeSpent function'
        AlarmActions:
          - !Ref AlertNotificationsTopic
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-scheduler-${sls:stage}-updateTimeSpent
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    UpdateGameStatisticsTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: UpdateGameStatisticsTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for updateGameStatistics function'
        AlarmActions:
          - !Ref AlertNotificationsTopic
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-scheduler-${sls:stage}-updateGameStatistics
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    SnapshotTournamentLeaderboardTimeoutAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
        AlarmName: SnapshotTournamentLeaderboardTimeout-${sls:stage}
        AlarmDescription: 'Notifications about Lambda timeouts for snapshotTournamentLeaderboard function'
        AlarmActions:
          - !Ref AlertNotificationsTopic
        Namespace: AWS/Lambda
        MetricName: Duration
        Statistic: Maximum
        Dimensions:
          - Name: FunctionName
            Value: chess-dojo-scheduler-${sls:stage}-snapshotTournamentLeaderboard
        Period: 86400
        EvaluationPeriods: 1
        Threshold: 700000
        ComparisonOperator: GreaterThanThreshold
        TreatMissingData: ignore

    ########### End Alert Resources #############
